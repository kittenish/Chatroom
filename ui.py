# -*- coding: utf-8 -*-# coding="utf-8"import wximport sysreload(sys)sys.setdefaultencoding('utf8')sys.path.append("./client")from client import Clientimport threadimport selectimport timeimport structimport osimport datetimefrom definations import *global CLIENT_NAMEglobal CLIENT_IPglobal ROOM_NAMEclass MyFrame1 ( wx.Frame ):	def __init__( self, parent ):		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition, size = wx.Size( 500,400 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )		self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )		bSizer6 = wx.BoxSizer( wx.VERTICAL )		self.m_staticText7 = wx.StaticText( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( -1,70 ), 0 )		self.m_staticText7.Wrap( -1 )		bSizer6.Add( self.m_staticText7, 0, wx.ALL, 5 )		bSizer7 = wx.BoxSizer( wx.HORIZONTAL )		bSizer7.SetMinSize( wx.Size( -1,100 ) )		self.m_staticText9 = wx.StaticText( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0 )		self.m_staticText9.Wrap( -1 )		bSizer7.Add( self.m_staticText9, 0, wx.ALL, 5 )		self.m_staticText10 = wx.StaticText( self, wx.ID_ANY, u"YOUR CHAT NAME", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText10.Wrap( -1 )		self.m_staticText10.SetFont( wx.Font( 19, 75, 90, 90, False, wx.EmptyString ) )		bSizer7.Add( self.m_staticText10, 0, wx.ALL, 5 )		self.m_textCtrl9 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 200,27 ), 0 )		self.m_textCtrl9.SetFont( wx.Font( 18, 75, 90, 90, False, wx.EmptyString ) )		bSizer7.Add( self.m_textCtrl9, 0, wx.ALL, 5 )		bSizer6.Add( bSizer7, 0, wx.EXPAND, 5 )		bSizer12 = wx.BoxSizer( wx.HORIZONTAL )		self.m_staticText11 = wx.StaticText( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( -1,200 ), 0 )		self.m_staticText11.Wrap( -1 )		self.m_staticText11.SetMinSize( wx.Size( 50,80 ) )		bSizer12.Add( self.m_staticText11, 0, wx.ALL, 5 )		self.m_staticText12 = wx.StaticText( self, wx.ID_ANY, u"IP ADDRESS", wx.DefaultPosition, wx.Size( 160,-1 ), wx.ALIGN_CENTRE )		self.m_staticText12.Wrap( -1 )		self.m_staticText12.SetFont( wx.Font( 19, 75, 90, 90, False, wx.EmptyString ) )		bSizer12.Add( self.m_staticText12, 0, wx.ALL, 5 )		self.m_textCtrl11 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_PROCESS_ENTER )		self.m_textCtrl11.SetFont( wx.Font( 18, 75, 90, 90, False, wx.EmptyString ) )		self.m_textCtrl11.SetMinSize( wx.Size( 200,27 ) )		bSizer12.Add( self.m_textCtrl11, 0, wx.ALL, 5 )		bSizer6.Add( bSizer12, 0, wx.EXPAND, 5 )		bSizer9 = wx.BoxSizer( wx.HORIZONTAL )		self.m_staticText101 = wx.StaticText( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText101.Wrap( -1 )		self.m_staticText101.SetFont( wx.Font( 18, 75, 90, 90, False, wx.EmptyString ) )		self.m_staticText101.SetMinSize( wx.Size( 300,-1 ) )		bSizer9.Add( self.m_staticText101, 0, wx.ALL, 5 )		self.m_button4 = wx.Button( self, wx.ID_ANY, u"ENTER", wx.DefaultPosition, wx.Size( 100,-1 ), 0 )		self.m_button4.SetFont( wx.Font( 18, 75, 90, 92, False, wx.EmptyString ) )		bSizer9.Add( self.m_button4, 0, wx.ALL, 5 )		bSizer6.Add( bSizer9, 1, wx.EXPAND, 5 )		self.SetSizer( bSizer6 )		self.Layout()		self.Centre( wx.BOTH )		# Connect Events		self.m_textCtrl11.Bind( wx.EVT_TEXT_ENTER, self.enter )		self.m_button4.Bind( wx.EVT_BUTTON, self.enter )	def __del__( self ):		pass	# Virtual event handlers, overide them in your derived class	def entry( self, event ):		self.Close()		global CLIENT_NAME		global CLIENT_IP		CLIENT_IP = self.m_textCtrl11.GetValue()		CLIENT_NAME = self.m_textCtrl9.GetValue()		ChatRoom = start_chat(None)		ChatRoom.Show(True)	def enter( self, event ):		global CLIENT_IP		global CLIENT_NAME	 	CLIENT_IP= self.m_textCtrl11.GetValue()		CLIENT_NAME = self.m_textCtrl9.GetValue()		ChatRoom = start_chat(None)		self.Close()		ChatRoom.Show(True)class MyFrame2 ( wx.Frame ):	def __init__( self, parent ):		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = 'CHAT ROOM', pos = wx.DefaultPosition, size = wx.Size( 600,600 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )		self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )		bSizer1 = wx.BoxSizer( wx.HORIZONTAL )		bSizer11 = wx.BoxSizer( wx.VERTICAL )		self.m_staticText14 = wx.StaticText( self, wx.ID_ANY, u"CHAT MEMBER", wx.DefaultPosition, wx.Size( 190,-1 ), wx.ALIGN_CENTRE )		self.m_staticText14.Wrap( -1 )		self.m_staticText14.SetFont( wx.Font( 19, 75, 90, 90, False, wx.EmptyString ) )		bSizer11.Add( self.m_staticText14, 0, wx.ALL, 5 )		memberChoices = []		self.member = wx.ListBox( self, wx.ID_ANY, wx.DefaultPosition, wx.Size( 190,150 ), memberChoices, 0 )		self.member.SetFont( wx.Font( 15, 70, 90, 90, False, wx.EmptyString ) )		bSizer11.Add( self.member, 0, wx.ALL, 5 )		self.m_staticText12 = wx.StaticText( self, wx.ID_ANY, u"CHAT ROOM", wx.DefaultPosition, wx.Size( 190,-1 ), wx.ALIGN_CENTRE )		self.m_staticText12.Wrap( -1 )		self.m_staticText12.SetFont( wx.Font( 19, 75, 90, 90, False, wx.EmptyString ) )		bSizer11.Add( self.m_staticText12, 0, wx.ALL, 5 )		m_listBox2Choices = []		self.m_listBox2 = wx.ListBox( self, wx.ID_ANY, wx.DefaultPosition, wx.Size( 190,150 ), m_listBox2Choices, 0 )		bSizer11.Add( self.m_listBox2, 0, wx.ALL, 5 )		self.m_staticText121 = wx.StaticText( self, wx.ID_ANY, u"ROOM FILE", wx.DefaultPosition, wx.Size( 190,-1 ), wx.ALIGN_CENTRE )		self.m_staticText121.Wrap( -1 )		self.m_staticText121.SetFont( wx.Font( 19, 75, 90, 90, False, wx.EmptyString ) )		bSizer11.Add( self.m_staticText121, 0, wx.ALL, 5 )		m_listBox3Choices = []		self.m_listBox3 = wx.ListBox( self, wx.ID_ANY, wx.DefaultPosition, wx.Size( 190,105 ), m_listBox3Choices, 0 )		bSizer11.Add( self.m_listBox3, 0, wx.ALL, 5 )		bSizer1.Add( bSizer11, 0, wx.EXPAND, 5 )		bSizer2 = wx.BoxSizer( wx.HORIZONTAL )		bSizer3 = wx.BoxSizer( wx.VERTICAL )		bSizer3.SetMinSize( wx.Size( -1,50 ) )		bSizer8 = wx.BoxSizer( wx.HORIZONTAL )		self.m_staticText2 = wx.StaticText( self, wx.ID_ANY, u"ROOM NAME", wx.DefaultPosition, wx.Size( 110,-1 ), 0 )		self.m_staticText2.Wrap( -1 )		self.m_staticText2.SetFont( wx.Font( 19, 75, 90, 90, False, wx.EmptyString ) )		bSizer8.Add( self.m_staticText2, 0, wx.ALL, 5 )		self.room_name = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 220,25 ), wx.TE_CENTRE|wx.TE_READONLY )		self.room_name.SetFont( wx.Font( 18, 75, 90, 92, False, wx.EmptyString ) )		#self.room_name.AppendText(title)		bSizer8.Add( self.room_name, 0, wx.ALL, 5 )		bSizer3.Add( bSizer8, 1, wx.EXPAND, 5 )		self.chat_content = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 380,330 ), wx.TE_AUTO_URL|wx.TE_CAPITALIZE|wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_WORDWRAP )		self.chat_content.SetFont( wx.Font( 15, 70, 90, 90, False, wx.EmptyString ) )		bSizer3.Add( self.chat_content, 0, wx.ALL, 5 )		self.m_staticText4 = wx.StaticText( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( -1,0 ), 0 )		self.m_staticText4.Wrap( -1 )		bSizer3.Add( self.m_staticText4, 0, wx.ALL, 5 )		self.my_message = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 380,140 ), wx.TE_AUTO_URL|wx.TE_CAPITALIZE|wx.TE_PROCESS_ENTER|wx.TE_WORDWRAP )		self.my_message.SetFont( wx.Font( 15, 70, 90, 90, False, wx.EmptyString ) )		bSizer3.Add( self.my_message, 0, wx.ALL, 5 )		bSizer5 = wx.BoxSizer( wx.HORIZONTAL )		self.m_staticText5 = wx.StaticText( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 20,-1 ), 0 )		self.m_staticText5.Wrap( -1 )		bSizer5.Add( self.m_staticText5, 0, wx.ALL, 5 )		self.m_button4 = wx.Button( self, wx.ID_ANY, u"FILE", wx.DefaultPosition, wx.Size( 75,-1 ), 0 )		self.m_button4.SetFont( wx.Font( 15, 70, 90, 90, False, wx.EmptyString ) )		bSizer5.Add( self.m_button4, 0, wx.ALL, 5 )		self.m_button5 = wx.Button( self, wx.ID_ANY, u"LOG", wx.DefaultPosition, wx.Size( 75,-1 ), 0 )		self.m_button5.SetFont( wx.Font( 15, 70, 90, 90, False, wx.EmptyString ) )		bSizer5.Add( self.m_button5, 0, wx.ALL, 5 )		self.m_button1 = wx.Button( self, wx.ID_ANY, u"SEND", wx.DefaultPosition, wx.Size( 75,-1 ), 0 )		self.m_button1.SetFont( wx.Font( 15, 70, 90, 90, False, wx.EmptyString ) )		bSizer5.Add( self.m_button1, 0, wx.ALL, 5 )		self.m_button2 = wx.Button( self, wx.ID_ANY, u"LEAVE", wx.DefaultPosition, wx.Size( 75,-1 ), 0 )		self.m_button2.SetFont( wx.Font( 15, 70, 90, 90, False, wx.EmptyString ) )		bSizer5.Add( self.m_button2, 0, wx.ALL, 5 )		bSizer3.Add( bSizer5, 1, wx.EXPAND, 5 )		bSizer2.Add( bSizer3, 1, wx.EXPAND, 5 )		bSizer1.Add( bSizer2, 1, wx.EXPAND, 5 )		self.SetSizer( bSizer1 )		self.Layout()		self.Centre( wx.BOTH )		# Connect Events		self.m_listBox2.Bind( wx.EVT_LISTBOX_DCLICK, self.enter_room )		self.m_listBox3.Bind( wx.EVT_LISTBOX_DCLICK, self.download_file )		self.my_message.Bind( wx.EVT_TEXT_ENTER, self.send )		self.m_button4.Bind( wx.EVT_BUTTON, self.send_file )		self.m_button5.Bind( wx.EVT_BUTTON, self.save_log )		self.m_button1.Bind( wx.EVT_BUTTON, self.send )		self.m_button2.Bind( wx.EVT_BUTTON, self.leave )	def __del__( self ):		pass	def enter_room( self, event ):		global ROOM_NAME		ROOM_NAME = self.m_listBox2.GetString(self.m_listBox2.GetSelection())		if self.room_name.GetLineText(0) == '':			self.myClient.room = ROOM_NAME			self.myClient.enter_room()			self.room_name.AppendText(ROOM_NAME)			self.myClient.get_file()			self.myClient.get_log()		else:			self.chat_content.Clear()			self.member.Clear()			self.m_listBox3.Clear()			self.myClient.leave_room()			self.myClient.room = ROOM_NAME			self.myClient.enter_room()			self.room_name.Clear()			self.room_name.AppendText(ROOM_NAME)			self.myClient.get_file()			self.myClient.get_log()	def send( self, event ):		message = str(self.my_message.GetLineText(0)).encode('utf-8').strip()		if self.room_name.GetLineText(0) == '':			dial = wx.MessageDialog(None, 'Please choose a room! ', 'Info', wx.OK | wx.ICON_EXCLAMATION)			dial.ShowModal()		else:			if message != '':				prepare_mess = {}				prepare_mess['type'] = str(MESSAGE)				prepare_mess['message'] = '<' + self.myClient.name + '> ' + message + '(' + datetime.datetime.now().strftime("%H:%M:%S") + ')' + '\n'				prepare_mess['name'] = self.myClient.name				prepare_mess['check'] = hash(str(prepare_mess['message'])) & 0xffff				length = str(len(str(prepare_mess))).rjust(4,'0')				self.myClient.sendMessageToServer(length + str(prepare_mess))				self.my_message.Clear()	def leave( self, event ):		if self.room_name.GetLineText(0) == '':			self.Close()		else:			self.myClient.disconnect()	def save_log( self, event ):		if self.room_name.GetLineText(0) == '':			dial = wx.MessageDialog(None, 'Please choose a room! ', 'Info', wx.OK | wx.ICON_EXCLAMATION)			dial.ShowModal()		else:			prepare_mess = {}			prepare_mess['type'] = str(SAVE_LOG)			prepare_mess['check'] = hash(str(prepare_mess['type'])) & 0xffff			length = str(len(str(prepare_mess))).rjust(4,'0')			self.myClient.sendMessageToServer(length + str(prepare_mess))	def send_file( self, event ):		if self.room_name.GetLineText(0) == '':			dial = wx.MessageDialog(None, 'Please choose a room! ', 'Info', wx.OK | wx.ICON_EXCLAMATION)			dial.ShowModal()		else:			dlg = wx.FileDialog(self, message="Choose a file", defaultFile="", style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR)			if dlg.ShowModal() == wx.ID_OK:				paths = dlg.GetPaths()				print paths				FILEINFO_SIZE = struct.calcsize('128sI')				fhead = struct.pack('128sI', str(paths[0]), os.stat(paths[0]).st_size)				fp = open(paths[0],'rb')				self.myClient.sendMessageToServer('0000' + fhead)				print "sending over..."				while 1:					filedata = fp.read(1024)					if not filedata:						break					else:						self.myClient.sendMessageToServer(filedata)				fp.close()	def download_file( self, event ):		print self.m_listBox3.GetSelection()		file_name = self.m_listBox3.GetString(self.m_listBox3.GetSelection())		prepare_mess = {}		prepare_mess['type'] = str(DOWNLOAD)		prepare_mess['file_name'] = file_name		prepare_mess['check'] = hash(str(prepare_mess['type'])) & 0xffff		length = str(len(str(prepare_mess))).rjust(4,'0')		self.myClient.sendMessageToServer(length + str(prepare_mess))class start_chat(MyFrame2):	def __init__(self,parent):		MyFrame2.__init__(self, parent)		self.myClient = Client('127.0.0.1', 5000, int(CLIENT_IP))		self.myClient.ip = CLIENT_IP		self.myClient.name = CLIENT_NAME		self.myClient.connectToServer()		self.myClient.threads = thread.start_new_thread(self.receive, ())		self.m_listBox2.Append('ROOM 1')		self.m_listBox2.Append('ROOM 2')		self.m_listBox2.Append('ROOM 3')		self.m_listBox2.Append('ROOM 4')		self.m_listBox2.Append('ROOM 5')		self.m_listBox2.Append('ROOM 6')	def receive(self):		while True:			rlist = [sys.stdin, self.myClient.mySocket]			(read_list, write_list, error_list) = select.select(rlist, [], [])			for sock in read_list:				if sock == self.myClient.mySocket:					mess = self.myClient.reciverMessageFromServer()					if not mess :						print '\nDisconnected from chat server'						sys.exit()					else :						i = 0						while i<len(mess) - 1:							length = int(mess[i:i+4])							if length == 0:								FILEINFO_SIZE = struct.calcsize('128sI')								fhead = sock.recv(FILEINFO_SIZE)								i = i + FILEINFO_SIZE								filename, filesize = struct.unpack('128sI', fhead)								newname = '/Users/mac/Desktop/计算机网络/chat/file/client/' + self.myClient.ip + '/' + filename.strip('\0').split('/')[-1]								fp = open(newname,'wb')								restsize = filesize								print "Downloading ..."								while 1:									if restsize > 1024:										filedata = sock.recv(1024)									else:										filedata = sock.recv(restsize)										fp.write(filedata)										break									if not filedata:										break									fp.write(filedata)									restsize = restsize - len(filedata)									if restsize <= 0:										break								fp.close()								print 'Downloading finish ' + filename.strip('\0').split('/')[-1]								dial = wx.MessageDialog(None, 'Download log successfully! ', 'Info', wx.OK | wx.ICON_INFORMATION)								dial.ShowModal()							else:								i = i + 4								mess = sock.recv(length)								message = eval(mess[0:length])								i = i + length								if message['type'] == str(MEMBER):									if message['check'] != hash(str(message['room'] + message['name'])) & 0xffff:										print 'ERROR' + mess										break									self.member.Append(message['name'])								elif message['type'] == str(MESSAGE):									if message['check'] != hash(str(message['message'])) & 0xffff:										print 'ERROR' + mess										break									self.chat_content.AppendText(message['message'])								elif message['type'] == str(REFRESH_MEMBER):									if message['check'] != hash(str(message['message'] + message['member'])) & 0xffff:										print 'ERROR' + mess										break									self.member.Clear()									all_member = message['member'].split('\n')									for i in all_member:										self.member.Append(i)								elif message['type'] == str(GET_MEMBER):									if message['check'] != hash(str(message['member'])) & 0xffff:										print 'ERROR' + mess										break									all_member = message['member'].split('\n')									for i in all_member:										self.member.Append(i)								elif message['type'] == str(GET_LOG):									if message['check'] != hash(str(message['message'])) & 0xffff:										print 'ERROR' + mess										break									log = message['message']									#print log									for i in log:										self.chat_content.AppendText(i)								elif message['type'] == str(SAVE_LOG):									if message['check'] != hash(str(message['message'])) & 0xffff:										print 'ERROR' + mess										break									log = message['message']									room = message['room']									self.myClient.ip									f = open('/Users/mac/Desktop/计算机网络/chat/file/client/' + self.myClient.ip + '/' + room + '.txt', 'w')									#for i in log:									f.writelines(log)									f.close()									dial = wx.MessageDialog(None, 'Download log successfully! ', 'Info', wx.OK | wx.ICON_INFORMATION)									dial.ShowModal()								elif message['type'] == str(ADD_FILE):									if message['check'] != hash(str(message['file'])) & 0xffff:										print 'ERROR' + mess										break									self.m_listBox3.Append(message['file'])								elif message['type'] == str(GET_FILE):									if message['check'] != hash(str(message['message'])) & 0xffff:										print 'ERROR' + mess										break									file_list = message['message']									print file_list									for i in file_list:										self.m_listBox3.Append(i)